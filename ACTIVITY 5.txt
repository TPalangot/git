ACTIVITY 5
Step-1: First, ensure you're on the branch you want to update: 
>git checkout your_local_branch 
Step-2: Replace your_local_branch with the name of your local branch. 
Step-3: Fetch the latest changes from the remote repository: 
>git fetch origin
This command fetches the latest changes from the remote repository named "origin" (you can 
replace "origin" with the name of your remote if it's different). 
Step-4:  Rebase your local branch onto the updated remote branch: 
git rebase origin/your_remote_branch 
Replace your_remote_branch with the name of the branch in the remote repository you want to 
rebase onto. 
Note:-  If there are conflicts during the rebase process, resolve them as instructed by Git. 
Once the rebase is complete, push your changes to the remote repository if necessary: 
> git push origin your_local_branch --force 
Use the --force option only if you have rebased commits that have already been pushed to the 
remote repository. Be cautious when using --force as it overwrites history on the remote 
repository.

Activity 6 
Step-1: Make sure you are in the "master" branch by switching to it: 
$ git checkout master 
Step-2. Create a new branch named "feature-branch" and switch to it: 
$ git checkout -b feature-branch 
This command will create a new branch called "feature-branch" and switch to it. 
Step-3. Make your changes in the "feature-branch" by adding, modifying, or deleting files 
Step-4. Stage and commit your changes in the "feature-branch": 
$ git add . 
$ git commit -m "Your commit message for feature-branch" 
Replace "Your commit message for feature-branch" with a descriptive commit message for 
the changes you made in the "feature-branch." 
Step-5. Switch back to the "master" branch: 
$ git checkout master 
Step-6. Merge the "feature-branch" into the "master" branch: 
$ git merge feature-branch 

ACTIVITY 7
Steps-1: create working directory/folder "Tagdemo" using command  
>mkdir TagDemo 
Step-2: go inside the working directory and initialize this directory as git repository using command  
>cd TagDemo 
>git init
Step-2: create file "test.txt" and put it to staging and then commit it using following command 
>echo>test.txt 
>git add test.txt 
>git commit –m "first commit: test.txt created"
Step-3: now create the tag and check whether the tags are created using command 
>git tag v1.0.0 
Step-4 add one line ("my name is srinath") inside test.txt file and make 2nd commit  and then add tag 
(v2.0.0)
 Step-5: add 2nd line (I love teaching) in the test.txt file and make 3rd commit and then add tag (v3.0.0)
Step-6: check list of all  tag avaiable using command  
>git tag
Step-7: to see any particular tag and its detail use command  
>git show "tag name" 
example : 
>git show v2.0.0 
Step-8: To see the difference between two versions (i.e v1.0.0 and v3.0.0) use below command 
>git diff v1.0.0 v3.0.0
Note:- if you want to go to any particular tag use command  
>git checkout "tag name"

ACTIVITY 8
Steps-1: create new folder/project to demonstrate cherry pick 
> mkdir cherrypick
Step-2: go inside the folder cherrypick and initialize the git repository using the command  
> cd cherrypick 
> git init 
Step-3 : create a file "sri.txt" and add it to staging area then commit it using command  
>echo > sri.txt 
>git add sri.txt 
>gir commit –m "sri.txt is added"
Step-4 : check the git log for the commit msg using command 
> git log 
Or you can use shorthand command  
>git log –oneline 
Step-5 create three versions of the project that is three branches called v1, v2 and v3 and check the 
branches create or not using command 
>git branch v1 
>git branch v2 
> git branch v3 
Check  
>git branch
Step-6 go to v3 branch and create a file "test.txt" and add it to staging and then commit it using command  
>git checkout v3 
Step-2: checkout from V3 branch to V1 and then use cherry pick command to apply the commit as show 
below  
> git checkout v1 
>dir  
After applying cherry-pick command you see both files (i.e sri.txt and bugfix.txt) 
>git cherry-pick c057a7c
Step-3: Repeat above step2 to apply the changes in v2 branch also
